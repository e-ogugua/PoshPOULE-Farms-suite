// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  role          String    @default("user") // 'user' or 'admin'
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Order {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  totalAmount  Float     @default(0) @map("total_amount")
  status       String    @default("pending")
  items        Json
  shippingInfo Json      @map("shipping_info")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  user         User      @relation(fields: [userId], references: [id])
  
  @@map("orders")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int      @default(0)
  image       String?
  category    String
  slug        String   @unique
  isFeatured  Boolean  @default(false) @map("is_featured")
  rating      Float?   @default(0)
  numReviews  Int      @default(0) @map("num_reviews")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  reviews     Review[]
  
  @@map("products")
}

model Review {
  id         String   @id @default(cuid())
  productId  String   @map("product_id")
  userId     String   @map("user_id")
  rating     Int
  comment    String?
  createdAt  DateTime @default(now()) @map("created_at")
  
  product    Product  @relation(fields: [productId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  
  @@map("reviews")
}
