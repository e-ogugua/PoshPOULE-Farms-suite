// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  role          String    @default("user") // 'user' or 'admin'
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
  orders   Order[]
  reviews  Review[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model OrderProduct {
  id          String   @id @default(cuid())
  productId   String   @map("product_id")
  name        String
  quantity    Int
  priceNaira  Float    @map("price_naira")
  orderId     String   @map("order_id")
  createdAt   DateTime @default(now()) @map("created_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_products")
}

model Order {
  id              String   @id @default(cuid())
  customerName    String   @map("customer_name")
  customerEmail   String   @map("customer_email")
  customerPhone   String   @map("customer_phone")
  orderType       String   @default("pickup") @map("order_type")
  scheduledDate   String   @map("scheduled_date")
  scheduledTime   String?  @map("scheduled_time")
  deliveryAddress String?  @map("delivery_address")
  notes           String?
  totalAmount     Float    @map("total_amount")
  status          String   @default("new")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  products OrderProduct[]

  @@map("orders")
}

model Product {
  id              String   @id @default(cuid())
  name            String
  description     String
  priceNaira      Float    @map("price")
  basePriceNaira  Float    @default(0) @map("base_price")
  stock           Int      @default(0)
  image           String?
  images          String[] @default([])
  category        String
  slug            String   @unique
  featured        Boolean  @default(false) @map("is_featured")
  available       Boolean  @default(true)
  rating          Float?   @default(0)
  numReviews      Int      @default(0) @map("num_reviews")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  reviews Review[]

  @@map("products")
}

model Review {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  userId    String   @map("user_id")
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("reviews")
}
